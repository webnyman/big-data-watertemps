<div class="container">
  <h2 class="mt-5">Temperature Data Visualization</h2>
  <%- include('../partials/spinner') %>
</div>
<script>
  // Get the loader and plot elements
  const loader = document.getElementById("loader");
  const plotDiv = document.getElementById("temperaturePlot");
  function getlocationNameFromHref() {
    // Get the current URL from the browser's address bar
    const currentUrl = window.location.href;

    // Create a URL object from the current URL
    const url = new URL(currentUrl);

    // Get the pathname from the URL
    const pathname = url.pathname;

    // Split the pathname into parts using "/" as the delimiter
    const parts = pathname.split("/");

    // The last part of the path is the last element of the parts array
    const lastPart = parts[parts.length - 1];

    // Optionally, decode the URI component if you want the unescaped version
    return decodeURIComponent(lastPart);
  }
  // Hide the loader when the plot is ready
  function hideLoader() {
    loader.style.display = "none";
  }
  const rawData = JSON.parse('<%- data %>');

  // Format the data for Plotly
  let formattedData = rawData.date
    .map((date, index) => ({
      date: date,
      location: rawData.badplats[index],
      averageTemp: rawData.averageTemp[index].averageTemp,
    }))
    .filter((item) => item.location !== null);

  let groupedData = formattedData.reduce((acc, curr) => {
    const location = curr.location || "Unknown";
    if (!acc[location]) acc[location] = [];
    acc[location].push(curr);
    return acc;
  }, {});

  const traces = Object.keys(groupedData).map((location) => ({
    x: groupedData[location].map((item) => item.date),
    y: groupedData[location].map((item) => item.averageTemp),
    type: "scatter",
    mode: "lines+markers",
    name: location,
    marker: {
      color: "#" + Math.floor(Math.random() * 16777215).toString(16),
    },
  }));
  // Define the layout of the graph
  const layout = {
    title: "Daily Average Temperature by Location",
    xaxis: {
      title: "Date",
      tickformat: "%Y-%m-%d",
    },
    yaxis: {
      title: "Average Temperature (Â°C)",
    },
  };
  // Plot using Plotly
  Plotly.newPlot("temperaturePlot", traces, layout).then(hideLoader);
</script>
<script>
  // Define the base URL for the application
  let BASE_URL = "<%= baseURL %>";
  // Add an event listener for the DOMContentLoaded event
  document.addEventListener("DOMContentLoaded", function () {
    const myPlot = document.getElementById("temperaturePlot"); // Ensure you have a reference to your Plotly graph

    myPlot.on("plotly_legendclick", function (data) {
      var legendItem = data.data[data.curveNumber].name; // Get the name of the legend item

      // Define your base URL or routing logic here with current base URL
      var baseURL = BASE_URL + "watertemp/location/";

      // Redirect to the URL corresponding to the legend item clicked
      window.location.href = baseURL + encodeURIComponent(legendItem);

      return false; // Prevent default behavior of legend item click
    });
  });
</script>
